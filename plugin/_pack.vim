" Generated by pack. DO NOT EDIT!

scriptencoding utf-8

function! s:do_cmd(cmd, bang, start, end, args)
    exec printf('%s%s%s %s', (a:start == a:end ? '' : (a:start.','.a:end)), a:cmd, a:bang, a:args)
endfunction


" Chiel92/vim-autoformat
noremap <F8> :Autoformat<CR>

" Valloric/YouCompleteMe
let g:ycm_error_symbol                                  = '✖'
let g:ycm_warning_symbol                                = '⚡'
let g:ycm_confirm_extra_conf                            = 0
let g:ycm_global_ycm_extra_conf                         = '~/.vim/.ycm_extra_conf.py'
let g:ycm_complete_in_comments                          = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_seed_identifiers_with_syntax                  = 1
let g:ycm_cache_omnifunc                                = 0
let g:ycm_python_binary_path                            = 'python3'

" preview
"let g:ycm_add_preview_to_completeopt                    = 1
"let g:ycm_autoclose_preview_window_after_insertion      = 1
set completeopt-=preview

" tags
let g:ycm_collect_identifiers_from_tags_files           = 1
set tags+=~/.vim/tags/stdcpp.tags

nnoremap <Leader>tc :YcmCompleter GoToDeclaration<CR>
nnoremap <Leader>td :YcmCompleter GoToDefinition<CR>
nnoremap <Leader><Leader>f :YcmCompleter FixIt<CR>
nnoremap <Leader>gd :YcmCompleter GetDoc<CR>
nnoremap <Leader>gt :YcmCompleter GetType<CR>

" alvan/vim-indexer
" 默认 --c++-kinds=+p+l，重新设置为 --c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v
" 默认 --fields=+iaS 不满足 YCM 要求，需改为 --fields=+iaSl
let g:indexer_tags_options = "-R --sort=yes --c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v --fields=+iaSl --extra=+q --languages=c,c++,php,python"
let g:indexer_tags_savedir = "~/.vim/indexer-tags/"

" add *.tex *.bib
let g:indexer_tags_watches = ["*.c", "*.h", "*.c++", "*.cpp", "*.php", "*.py", "*.tex", "*.bib"]

" ctrlpvim/ctrlp.vim
let g:ctrlp_map = '<C-f>f'
nnoremap <silent> <C-f>b :CtrlPBuffer<CR>
nnoremap <silent> <C-f>l :CtrlPLine<cr>
nnoremap <silent> <C-f>t :CtrlPBufTag<CR>
nmap     <C-f>d :CtrlPDir <Left><Right>

" Make ctrlp faster
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }

" derekwyatt/vim-fswitch
" switch between *.cpp and *.h
nnoremap <silent> <Leader>sw :FSHere<CR>

" derekwyatt/vim-protodef
" 设置 pullproto.pl 脚本路径
let g:protodefprotogetter='~/.vim/pack/completion/start/vim-protodef/pullproto.pl'
" 成员函数的实现顺序与声明顺序一致
let g:disable_protodef_sorting=1


" dyng/ctrlsf.vim
let g:ctrlsf_ackprg = 'rg'

nnoremap <C-f>w :CtrlSF ''<Left>
nmap     <C-f>n <Plug>CtrlSFCwordPath
nnoremap <C-f>o :CtrlSFToggle<CR>

" easymotion/vim-easymotion
" change the prefix from <Leader><Leader> to <Leader>
map <Leader> <Plug>(easymotion-prefix)

" only map what you need (in case of confiltion)
let g:EasyMotion_do_mapping = 0
map <Leader>f <Plug>(easymotion-f)
map <Leader>F <Plug>(easymotion-f)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

" flazz/vim-colorschemes
colorscheme solarized

" gou4shi1/ultisnips
let g:UltiSnipsUsePythonVersion = 3
let g:UltiSnipsExpandTrigger="<C-j>"
let g:UltiSnipsEditSplit="vertical"
command SnipsEdit UltiSnipsEdit!


" gou4shi1/vim-airline
" powerline fonts
let g:airline_powerline_fonts = 1

" tabline
let g:airline#extensions#tabline#enabled = 1
"let g:airline#extensions#tabline#buffer_nr_show = 1

" ycm
let g:airline#extensions#ycm#enabled = 1

" extra-powerline-symbols
"let g:airline_left_sep = "\uE0C0"
"let g:airline_right_sep = "\uE0C2"



" gregsexton/gitv
command! -nargs=* -range -bang Gitv packadd gitv | call s:do_cmd('Gitv', "<bang>", <line1>, <line2>, <q-args>)

" haya14busa/incsearch-easymotion
" incsearch.vi X vim-easymotion
map <leader>/ <Plug>(incsearch-easymotion-/)
map <leader>? <Plug>(incsearch-easymotion-?)
map <leader>g/ <Plug>(incsearch-easymotion-stay)

" incsearch.vim X fuzzy X vim-easymotion
function! s:config_easyfuzzymotion(...) abort
  return extend(copy({
  \   'converters': [incsearch#config#fuzzy#converter()],
  \   'modules': [incsearch#config#easymotion#module()],
  \   'keymap': {"\<CR>": '<Over>(easymotion)'},
  \   'is_expr': 0,
  \   'is_stay': 1
  \ }), get(a:, 1, {}))
endfunction
noremap <silent><expr> <leader>zz/ incsearch#go(<SID>config_easyfuzzymotion())

" haya14busa/incsearch-fuzzy.vim
" fuzzy search
map z/ <Plug>(incsearch-fuzzy-/)
map z? <Plug>(incsearch-fuzzy-?)
map zg/ <Plug>(incsearch-fuzzy-stay)

" use *spell* feature in Vim
map <leader>z/ <Plug>(incsearch-fuzzyspell-/)
map <leader>z? <Plug>(incsearch-fuzzyspell-?)
map <leader>zg/ <Plug>(incsearch-fuzzyspell-stay)

" haya14busa/incsearch.vim
" basic usage
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" auto no highlight
set hlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

" additional map
augroup incsearch-keymap
    autocmd!
    autocmd VimEnter * call s:incsearch_keymap()
augroup END
function! s:incsearch_keymap()
    IncSearchNoreMap <Right> <Over>(incsearch-next)
    IncSearchNoreMap <Left>  <Over>(incsearch-prev)
    IncSearchNoreMap <Down>  <Over>(incsearch-scroll-f)
    IncSearchNoreMap <Up>    <Over>(incsearch-scroll-b)
endfunction

" iamcco/markdown-preview.vim
autocmd FileType markdown packadd markdown-preview.vim

nmap <Leader>md <Plug>MarkdownPreview
nmap <Leader><Leader>md <Plug>StopMarkdownPreview

" iamcco/mathjax-support-for-mkdp
autocmd FileType markdown packadd mathjax-support-for-mkdp

" jeaye/color_coded
autocmd FileType cpp,c packadd color_coded

" Disable color_coded in diff mode
if &diff
  let g:color_coded_enabled = 0
endif

" disable color_coded while inserting
" in case of delay
augroup color-coded
    autocmd!
    autocmd InsertEnter *.c,*.cpp,*.h,*.hpp silent! CCtoggle
    autocmd InsertLeave *.c,*.cpp,*.h,*.hpp silent! CCtoggle
augroup END


" jiangmiao/auto-pairs
autocmd filetype c,cpp let g:AutoPairs = {'{':'}'}
autocmd filetype lisp,scheme,art let g:AutoPairs = {'(':')'}

" junegunn/vim-easy-align
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" lervag/vimtex
autocmd FileType tex packadd vimtex

" luochen1990/rainbow
"0 if you want to enable it later via :RainbowToggle
let g:rainbow_active = 1

" majutsushi/tagbar
nnoremap <Leader><Leader>t :TagbarToggle<CR>

let tagbar_left=1
let tagbar_width=32
let g:tagbar_compact=1
let g:tagbar_type_cpp = {
     \ 'ctagstype' : 'c++',
     \ 'kinds'     : [
         \ 'c:classes:0:1',
         \ 'd:macros:0:1',
         \ 'e:enumerators:0:0',
         \ 'f:functions:0:1',
         \ 'g:enumeration:0:1',
         \ 'l:local:0:1',
         \ 'm:members:0:1',
         \ 'n:namespaces:0:1',
         \ 'p:functions_prototypes:0:1',
         \ 's:structs:0:1',
         \ 't:typedefs:0:1',
         \ 'u:unions:0:1',
         \ 'v:global:0:1',
         \ 'x:external:0:1'
     \ ],
     \ 'sro'        : '::',
     \ 'kind2scope' : {
         \ 'g' : 'enum',
         \ 'n' : 'namespace',
         \ 'c' : 'class',
         \ 's' : 'struct',
         \ 'u' : 'union'
     \ },
     \ 'scope2kind' : {
         \ 'enum'      : 'g',
         \ 'namespace' : 'n',
         \ 'class'     : 'c',
         \ 'struct'    : 's',
         \ 'union'     : 'u'
     \ }
\ }

" mattn/gist-vim
command! -nargs=* -range -bang Gist packadd gist-vim | call s:do_cmd('Gist', "<bang>", <line1>, <line2>, <q-args>)

" mbbill/undotree
nnoremap <Leader><Leader>u :UndotreeToggle<CR>

" mhinz/vim-startify
" hide quote
let g:startify_custom_header = []

" list
let g:startify_lists = [
            \ { 'type': 'files',     'header': [   'MRU']            },
            \ { 'type': 'dir',       'header': [   'MRU '. getcwd()] },
            \ { 'type': 'sessions',  'header': [   'Sessions']       },
            \ { 'type': 'bookmarks', 'header': [   'Bookmarks']      },
            \ { 'type': 'commands',  'header': [   'Commands']       },
            \ ]

" highlight
hi link StartifyBracket Punctuation
hi link StartifyFile String
hi link StartifyFooter Normal
hi link StartifyHeader Comment
hi link StartifyNumber Function
hi link StartifyPath Statement

" nathanaelkane/vim-indent-guides
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_start_level=2
let g:indent_guides_guide_size=1

nmap <silent> <Leader><Leader>i <Plug>IndentGuidesToggle

let indent_guides_auto_colors = 0
hi IndentGuidesOdd  ctermbg=0
hi IndentGuidesEven ctermbg=0
"hi IndentGuidesEven ctermbg=23

" romainl/vim-qf
" AsyncRun has set these quickfix features
let g:qf_auto_resize = 0
let g:qf_auto_open_quickfix = 0
"nmap <Leader>qf <Plug>(qf_qf_toggle)

" toggle location window
nmap <Leader><Leader>l <Plug>(qf_loc_toggle)


" scrooloose/nerdtree
nnoremap <Leader><Leader>f :NERDTreeToggle<CR>
" 设置 NERDTree 子窗口宽度
let NERDTreeWinSize=32
" 设置 NERDTree 子窗口位置
let NERDTreeWinPos="right"
" 显示隐藏文件
let NERDTreeShowHidden=1
" NERDTree 子窗口中不显示冗余帮助信息
let NERDTreeMinimalUI=1
" 删除文件时自动删除文件对应 buffer
let NERDTreeAutoDeleteBuffer=1


" sheerun/vim-polyglot
let g:polyglot_disabled = ['latex']

" vim-markdown
command MD set filetype=markdown


" skywind3000/asyncrun.vim
" open quickfix window automatically at 8 lines height after command starts
let g:asyncrun_open = 8

" open the quickfix window when something adds to it
autocmd QuickFixCmdPost * call asyncrun#quickfix_toggle(8, 1)

" toggle the quickfix window
noremap <Leader><Leader>q :call asyncrun#quickfix_toggle(8)<CR>

" auto save all modified buffers before executing AsyncRun commands
let g:asyncrun_save = 1

" ring a bell after finished
"let g:asyncrun_bell = 1

" display progress in status line or airline
"let g:asyncrun_status = "stopped"
"let g:airline_section_error = airline#section#create_right(['%{g:asyncrun_status}'])

" If vim's 'encoding' is different with OS's encoding
" output in quickfix window which contains CJK characters may failed
" tell asyncrun the output of background command need to be convert to the same encoding as vim
"let g:asyncrun_encs = 'gbk'

" :Make (replaced for :make)
command! -bang -nargs=* -complete=file Make AsyncRun -program=make @ <args>


" vim-scripts/DoxygenToolkit.vim
nnoremap <Leader>cf :Dox<CR>

let g:DoxygenToolkit_authorName = "gou4shi1, admin@goushi.me"
let g:DoxygenToolkit_paramTag_post = "<++>"
let g:DoxygenToolkit_returnTag_post = "<++>"
let g:DoxygenToolkit_throwTag_post = "<++>"
let g:DoxygenToolkit_templateParamTag_post = "<++>"
"let g:DoxygenToolkit_briefTag_funcName = "yes"
"let g:load_doxygen_syntax = 1
"let g:doxygen_enhanced_color = 1

" vim-scripts/YankRing.vim
let g:yankring_history_dir = '$HOME/.vim'

" w0rp/ale
let g:ale_linters = {
\   'c': [],
\   'cpp': [],
\   'python': ['flake8'],
\}

" 快速跳转到前/后一个出错处
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

